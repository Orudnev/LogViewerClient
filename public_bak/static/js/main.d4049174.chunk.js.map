{"version":3,"sources":["logo.svg","reducers/dumbReducer.js","App.js","components/Root.js","serviceWorker.js","index.js"],"names":["module","exports","defaultState","DumbState","reducer","state","App","routes","path","exact","main","styles1","background","width","cursor","margin","height","Root","store","style","display","padding","split","minSize","defaultSize","resizerStyle","component","listStyleType","to","map","route","key","Boolean","window","location","hostname","match","console","log","dumbReducer","createStore","__REDUX_DEVTOOLS_EXTENSION__","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sGAAAA,EAAOC,QAAU,IAA0B,kC,oICArCC,EAAe,CACjBC,UAAU,IASCC,MALf,WACC,IADgBC,EACjB,uDADyBH,EAErB,OAAOG,G,0CCkBIC,ICPTC,EAAS,CACb,CAAEC,KAAM,IACNC,OAAO,EAEPC,KAAM,kBAAM,2CAEd,CAAEF,KAAM,aAENE,KAAM,kBAAM,kDAEd,CAAEF,KAAM,aAENE,KAAM,kBAAM,iDAQVC,EAAU,CACdC,WAAY,OACZC,MAAO,MACPC,OAAQ,aACRC,OAAQ,QACRC,OAAQ,QAuDKC,EApDF,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACX,kBAAC,IAAD,CAAUA,MAAOA,GACf,kBAAC,IAAD,KACA,yBAAKC,MAAO,CAAEC,QAAS,SACnB,yBAAKD,MAAO,CACVE,QAAS,OACTR,MAAO,MACPD,WAAY,YAEZ,kBAAC,IAAD,CACMU,MAAM,WACNC,QAAS,IACTC,YAAa,IACbC,aAAcd,GAEpB,6BACI,kBAAC,IAAD,CAAOF,OAAK,EAACD,KAAK,IAAIkB,UAAa,kBAC/B,wBAAIP,MAAO,CAAEQ,cAAe,OAAQN,QAAS,IAC3C,4BAAI,kBAAC,IAAD,CAAMO,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,cACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,kBAGV,kBAAC,IAAD,CAAOpB,KAAK,aAAakB,UAAa,kBACtC,wBAAIP,MAAO,CAAEQ,cAAe,OAAQN,QAAS,IAC3C,4BAAI,kBAAC,IAAD,CAAMO,GAAG,KAAT,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAG,cAAT,mBAIV,6BACCrB,EAAOsB,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,CACEC,IAAKD,EAAMtB,KACXA,KAAMsB,EAAMtB,KACZC,MAAOqB,EAAMrB,MACbiB,UAAWI,EAAMpB,iBCtEXsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,QAAQC,IAAI,eACZD,QAAQC,IAAIC,GACZ,IAAMrB,EAAQsB,YAAYD,EAAY,GAAGN,OAAOQ,8BAAgCR,OAAOQ,gCACvFC,iBAAO,kBAAC,EAAD,CAAMxB,MAAOA,IAAWyB,SAASC,eAAe,SDyHjD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLf,QAAQe,MAAMA,EAAMC,c","file":"static/js/main.d4049174.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const defaultState = {\r\n    DumbState:{}\r\n}\r\n\r\n\r\nfunction reducer(state = defaultState, action)\r\n{\r\n    return state;\r\n}\r\n\r\nexport default reducer;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport SplitPane from 'react-split-pane'\r\nimport { Provider } from 'react-redux'\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\nimport App from '../App'\r\nimport { Link } from 'react-router-dom'\r\n\r\n/*\r\nconst Root = ({ store }) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <Route path=\"/:filter?\" component={App} />\r\n    </Router>\r\n  </Provider>\r\n)\r\n*/\r\n\r\nconst routes = [\r\n  { path: '/',\r\n    exact: true,\r\n    //sidebar: () => <div>home sidebar!</div>,\r\n    main: () => <h2>Home main</h2>\r\n  },\r\n  { path: '/bubblegum',\r\n    //sidebar: () => <div>bubblegum sidebar!</div>,\r\n    main: () => <h2>Bubblegum mainnn</h2>\r\n  },\r\n  { path: '/shoelaces',\r\n    //sidebar: () => <div>shoelaces sidebar!</div>,\r\n    main: () => <h2>Shoelaces main</h2>\r\n  }\r\n]\r\n\r\nconst styles = {\r\n  background: \"\"\r\n};\r\n\r\nconst styles1 = {\r\n  background: '#000',\r\n  width: '2px',\r\n  cursor: 'col-resize',\r\n  margin: '0 5px',\r\n  height: '100%',\r\n};\r\n\r\nconst Root = ({ store }) => (\r\n  <Provider store={store}>\r\n    <Router>\r\n    <div style={{ display: 'flex' }}>\r\n        <div style={{\r\n          padding: '10px',\r\n          width: '40%',\r\n          background: '#f0f0f0'\r\n        }}>\r\n          <SplitPane\r\n                split=\"vertical\"\r\n                minSize={100}\r\n                defaultSize={100}\r\n                resizerStyle={styles1}\r\n          > \r\n          <div>\r\n              <Route exact path=\"/\" component = {() => (\r\n                  <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                    <li><Link to=\"/\">Home</Link></li>\r\n                    <li><Link to=\"/bubblegum\">Bubblegum</Link></li>\r\n                    <li><Link to=\"/shoelaces\">Shoelaces</Link></li>\r\n                  </ul>)}\r\n                  />\r\n              <Route path=\"/bubblegum\" component = {() => (\r\n              <ul style={{ listStyleType: 'none', padding: 0 }}>\r\n                <li><Link to=\"/\">Home</Link></li>\r\n                <li><Link to=\"/shoelaces\">Shoelaces</Link></li>\r\n              </ul>)}\r\n              />\r\n          </div>\r\n          <div>\r\n          {routes.map((route) => (\r\n            <Route\r\n              key={route.path}\r\n              path={route.path}\r\n              exact={route.exact}\r\n              component={route.main}\r\n            />\r\n          ))}\r\n          </div>\r\n        </SplitPane>\r\n        </div>\r\n      </div>           \r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\n\r\nRoot.propTypes = {\r\n  store: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Root","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore } from 'redux'\nimport dumbReducer from './reducers/dumbReducer'\nimport Root from './components/Root'\nimport * as serviceWorker from './serviceWorker';\n\nconsole.log(\"dumbReducer\");\nconsole.log(dumbReducer);\nconst store = createStore(dumbReducer,{},window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\nrender(<Root store={store} />, document.getElementById('root'))\n\nserviceWorker.unregister();\n"],"sourceRoot":""}